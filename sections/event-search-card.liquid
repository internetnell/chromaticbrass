<style>
    .events-list {
        grid-column: 1 / span 16;
        display: grid;
        grid-template-columns: repeat(3, minmax(0, 1fr));
        padding: 0;

        margin: 0 var(--space-page-margin);
    }

    .event-controls {
        display: grid;
        margin-bottom: var(--space-md);
        padding-left: 0px;
        padding-right: 0px;
        margin-left: var(--space-page-margin);
        margin-right: var(--space-page-margin);
    }

    .search {
        grid-column: 1 / span 4;
    }

    .select {
        grid-column: 13 / span 4;
    }

    /* ---------------- Tablet ----------------*/
    @media (max-width: 1024px) {
        .events-list {
            grid-template-columns: repeat(2, minmax(0, 1fr));
            grid-column: 1 / span 16;
        }
    }

    /* ---------------- Mobile ----------------*/
    @media (max-width: 768px) {
        .events-list {
            grid-template-columns: repeat(1, minmax(0, 1fr));
            grid-column: 1 / span 16;
        }
    }
</style>
<div class="event-controls container">
    <input type="text" placeholder="Search" aria-label="Search events" class="search"
        onchange="onSearchChange(this.value)">
    <select type="text" placeholder="Select" aria-label="Select" class="select" id="sortSelect"
        onchange="onSelect(this.value)">
        <option selected value="All">Sort By: All</option>
        <option value="Upcoming">Upcoming</option>
        <option value="Past">Past</option>
    </select>
</div>
<div class="events-list" id="events">
    {% for event in metaobjects.event.values %}
    {% render 'event-snippet',
    link: event.link,
    datetime: event.datetime,
    location: event.location,
    title: event.title,
    description: event.description,
    %}
    {% endfor %}
</div>

<script>
    const select = document.getElementById("sortSelect");
    let prevIndex = 0;
    select.selectedIndex = 0;

    function sortByDateDesc() {
        const events = document.getElementsByClassName("sortable-event");

        const sorted = Array.from(events).sort((a, b) => {
            return new Date(b.dataset.date) - new Date(a.dataset.date);
        });

        sorted.forEach(e => {
            if (e.classList.contains("hidden-event")) {
                e.classList.remove("hidden-event");
            }
            document.getElementById("events").appendChild(e);
        });
    }

    function filterByUpcoming() {
        const events = document.getElementsByClassName("sortable-event");
        const now = Date.now();
        const filtered = Array.from(events).filter((e, index) => {
            if (now > new Date(e.dataset.date)) {
                if (!e.classList.contains("hidden-event")) {
                    e.classList.add("hidden-event");
                }
            }

            return now < new Date(e.dataset.date);
        });

        filtered.forEach(e => {
            document.getElementById("events").appendChild(e);
        });
    }

    function filterByPassed() {
        const events = document.getElementsByClassName("sortable-event");
        const now = Date.now();
        const filtered = Array.from(events).filter((e, index) => {
            if (now < new Date(e.dataset.date)) {
                if (!e.classList.contains("hidden-event")) {
                    e.classList.add("hidden-event");
                }
            }

            return now > new Date(e.dataset.date);
        });

        filtered.forEach(e => {
            document.getElementById("events").appendChild(e);
        });
    }

    function onSelect(val) {
        select.options[prevIndex].innerHTML = select.options[prevIndex].value;
        select.options[select.selectedIndex].text = "Sort by: " + val;
        prevIndex = select.selectedIndex;
        SortBasedOnValue(val);
    }

    function onSearchChange(val) {
        sortByDateDesc();
        if (val.trim() === "") {
            SortBasedOnValue(select.options[select.selectedIndex].value)
            return;
        }

        const events = document.getElementsByClassName("sortable-event");
        const filtered = Array.from(events).filter((e, index) => {
            if (!e.dataset.title.toLowerCase().includes(val.toLowerCase())) {
                if (!e.classList.contains("hidden-event")) {
                    e.classList.add("hidden-event");
                }

                return false;
            }

            if (e.classList.contains("hidden-event")) {
                e.classList.remove("hidden-event");
            }

            return true;
        });

        filtered.forEach(e => {
            document.getElementById("events").appendChild(e);
        });
    }

    function SortBasedOnValue(val) {
        switch (val) {
            case "Upcoming":
                filterByUpcoming();
                break;
            case "Past":
                filterByPassed();
                break;
            default:
                sortByDateDesc();
                break;
        }
    }

    // Populate list with all events
    sortByDateDesc();
</script>

{% schema %}
{
"name": "Events Section",
"settings": [],
"presets": [
{
"name": "Events Section",
"category": "Custom Sections"
}
]
}
{% endschema %}

{% comment %} Add dropdown, on dropdown click run the sorter {% endcomment %}
{% comment %} Will we reach a limit of events? {% endcomment %}